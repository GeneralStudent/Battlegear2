@@ -96,7 +96,7 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 @SuppressWarnings("incomplete-switch")
-public abstract class EntityPlayer extends EntityLivingBase
+public abstract class EntityPlayer extends EntityLivingBase implements mods.battlegear2.api.core.IBattlePlayer
 {
     public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     private java.util.HashMap<Integer, BlockPos> spawnChunkMap = new java.util.HashMap<Integer, BlockPos>();
@@ -108,7 +108,7 @@
     protected static final DataParameter<Byte> PLAYER_MODEL_FLAG = EntityDataManager.<Byte>createKey(EntityPlayer.class, DataSerializers.BYTE);
     protected static final DataParameter<Byte> MAIN_HAND = EntityDataManager.<Byte>createKey(EntityPlayer.class, DataSerializers.BYTE);
     /** Inventory of the player */
-    public InventoryPlayer inventory = new InventoryPlayer(this);
+    public InventoryPlayer inventory = new mods.battlegear2.api.core.InventoryPlayerBattle(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
     /** The Container for the player's inventory (which opens when they press E) */
     public Container inventoryContainer;
@@ -2375,26 +2375,13 @@
 
     public ItemStack getItemStackFromSlot(EntityEquipmentSlot slotIn)
     {
-        return slotIn == EntityEquipmentSlot.MAINHAND ? this.inventory.getCurrentItem() : (slotIn == EntityEquipmentSlot.OFFHAND ? (ItemStack)this.inventory.offHandInventory.get(0) : (slotIn.getSlotType() == EntityEquipmentSlot.Type.ARMOR ? (ItemStack)this.inventory.armorInventory.get(slotIn.getIndex()) : ItemStack.EMPTY));
+        return mods.battlegear2.api.core.BattlegearUtils.getItemStackFromSlot(this, slotIn);
     }
 
     public void setItemStackToSlot(EntityEquipmentSlot slotIn, ItemStack stack)
     {
-        if (slotIn == EntityEquipmentSlot.MAINHAND)
-        {
+        if(mods.battlegear2.api.core.BattlegearUtils.setItemStackToSlot(this, slotIn, stack))
             this.playEquipSound(stack);
-            this.inventory.mainInventory.set(this.inventory.currentItem, stack);
-        }
-        else if (slotIn == EntityEquipmentSlot.OFFHAND)
-        {
-            this.playEquipSound(stack);
-            this.inventory.offHandInventory.set(0, stack);
-        }
-        else if (slotIn.getSlotType() == EntityEquipmentSlot.Type.ARMOR)
-        {
-            this.playEquipSound(stack);
-            this.inventory.armorInventory.set(slotIn.getIndex(), stack);
-        }
     }
 
     public Iterable<ItemStack> getHeldEquipment()
@@ -2917,4 +2904,31 @@
         OTHER_PROBLEM,
         NOT_SAFE;
     }
+
+    public int specialActionTimer = 0;
+    public boolean isShielding = false;
+    // -----MB-AddMethod-----
+    public void attackTargetEntityWithCurrentOffItem(Entity target) {
+        mods.battlegear2.api.core.BattlegearUtils.attackTargetEntityWithCurrentOffItem(this, target);
+    }
+    // -----MB-AddMethod-----
+    public boolean isBattlemode() {
+        return mods.battlegear2.api.core.BattlegearUtils.isPlayerInBattlemode(this);
+    }
+    //-----MB-AddMethod-----
+    public boolean isBlockingWithShield(){
+        return mods.battlegear2.api.core.BattlegearUtils.canBlockWithShield(this) && isShielding;
+    }
+    //-----MB-AddMethod-----
+    public void setBlockingWithShield(boolean block) {
+        isShielding = block && mods.battlegear2.api.core.BattlegearUtils.canBlockWithShield(this);
+    }
+    //-----MB-AddMethod-----
+    public int getSpecialActionTimer(){
+        return specialActionTimer;
+    }
+    //-----MB-AddMethod-----
+    public void setSpecialActionTimer(int time){
+        specialActionTimer = time;
+    }
 }
\ No newline at end of file
