@@ -2,6 +2,8 @@
 
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
@@ -37,8 +39,19 @@
 import static net.minecraftforge.client.IItemRenderer.ItemRendererHelper.*;
 
 @SideOnly(Side.CLIENT)
-public class ItemRenderer
+public class ItemRenderer implements mods.battlegear2.api.core.IOffhandRender
 {
+    /*
+	 * Mine & Blade: Notes
+	 * Edits made by: nerd-boy
+	 *
+	 * Edits: 1
+	 * Added Methods: 0
+	 * Added Fields: 1 (8 accessors)-added interface
+	 *
+	 * Because rendering the offhand item is quite complex the edits only defer the actual rendering to
+	 * another method in BattlegearRenderHelper. This makes the coremod infinitely simpler.
+	 */
     private static final ResourceLocation RES_ITEM_GLINT = new ResourceLocation("textures/misc/enchanted_item_glint.png");
     private static final ResourceLocation RES_MAP_BACKGROUND = new ResourceLocation("textures/map/map_background.png");
     private static final ResourceLocation RES_UNDERWATER_OVERLAY = new ResourceLocation("textures/misc/underwater.png");
@@ -549,6 +562,7 @@
 
         GL11.glDisable(GL12.GL_RESCALE_NORMAL);
         RenderHelper.disableStandardItemLighting();
     }
 
     /**
@@ -746,6 +760,7 @@
             this.itemToRender = itemstack;
             this.equippedItemSlot = entityclientplayermp.inventory.currentItem;
         }
+        mods.battlegear2.client.utils.BattlegearRenderHelper.updateEquippedItem(this, mc);//-----MB-Edited-----
     }
 
     /**
@@ -762,5 +777,45 @@
     public void resetEquippedProgress2()
     {
         this.equippedProgress = 0.0F;
+    }
+
+    /* ===================================== Battlegear2 START =====================================*/
+
+    //-----MB-AddFields-----(1)
+    public int equippedItemOffhandSlot = 0;
+
+    public ItemStack getItemToRender(){
+        return itemStackOffHand;
+    }
+
+    public void setItemToRender(ItemStack item){
+        itemStackOffHand = item;
+    }
+
+    public int getEquippedItemSlot(){
+        return equippedItemOffhandSlot;
+    }
+
+    public void setEquippedItemSlot(int slot){
+        equippedItemOffhandSlot = slot;
+    }
+
+    public float getEquippedProgress(){
+        return equippedProgressOffHand;
+    }
+
+    public void setEquippedProgress(float progress){
+        equippedProgressOffHand = progress;
+    }
+
+    public float getPrevEquippedProgress(){
+        return prevEquippedProgressOffHand;
+    }
+
+    public void setPrevEquippedProgress(float progress){
+        prevEquippedProgressOffHand = progress;
     }
 }

